package com.yourcompany.excel;

import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;
import java.util.Map;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ExcelGenerator {
    
    // Number of records per sheet
    private static final int RECORDS_PER_SHEET = 100;
    
    /**
     * Generates an Excel file from the provided data structure
     * 
     * @param data A map containing columnHeaders (List<String>) and data (List<Map<String, Object>>)
     * @return Byte array representing the Excel file
     */
    public static byte[] generateExcel(Map<String, Object> data) {
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            @SuppressWarnings("unchecked")
            List<String> headers = (List<String>) data.get("columnHeaders");
            
            @SuppressWarnings("unchecked")
            List<Map<String, Object>> allRows = (List<Map<String, Object>>) data.get("data");
            
            // Calculate number of sheets needed
            int totalRecords = allRows.size();
            int numberOfSheets = (int) Math.ceil((double) totalRecords / RECORDS_PER_SHEET);
            
            // Create common styles
            XSSFCellStyle headerStyle = createHeaderStyle(workbook);
            XSSFCellStyle dataStyle = createDataStyle(workbook);
            
            for (int sheetIndex = 0; sheetIndex < numberOfSheets; sheetIndex++) {
                // Create a new sheet for each batch of 100 records
                String sheetName = "Sheet" + (sheetIndex + 1);
                XSSFSheet sheet = workbook.createSheet(sheetName);
                
                // Create header row for each sheet
                XSSFRow headerRow = sheet.createRow(0);
                createHeaderRow(headerRow, headers, headerStyle);
                
                // Calculate start and end indices for this sheet
                int startIdx = sheetIndex * RECORDS_PER_SHEET;
                int endIdx = Math.min(startIdx + RECORDS_PER_SHEET, totalRecords);
                
                // Add data rows for this sheet
                for (int i = startIdx; i < endIdx; i++) {
                    XSSFRow row = sheet.createRow(i - startIdx + 1); // +1 to account for header row
                    Map<String, Object> rowData = allRows.get(i);
                    createDataRow(row, rowData, headers, dataStyle);
                }
                
                // Auto-size columns for better readability
                for (int i = 0; i < headers.size(); i++) {
                    sheet.autoSizeColumn(i);
                }
                
                // Set column widths to reasonable defaults if auto-size makes them too narrow
                for (int i = 0; i < headers.size(); i++) {
                    if (sheet.getColumnWidth(i) < 3000) {
                        sheet.setColumnWidth(i, 3000);
                    } else if (sheet.getColumnWidth(i) > 15000) {
                        sheet.setColumnWidth(i, 15000);
                    }
                }
                
                // Freeze the header row
                sheet.createFreezePane(0, 1);
            }
            
            // Write to byte array and return
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            workbook.write(bos);
            return bos.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException("Failed to generate Excel file", e);
        }
    }
    
    private static XSSFCellStyle createHeaderStyle(XSSFWorkbook workbook) {
        XSSFCellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontHeightInPoints((short) 12);
        style.setFont(font);
        style.setFillForegroundColor(IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        return style;
    }
    
    private static XSSFCellStyle createDataStyle(XSSFWorkbook workbook) {
        XSSFCellStyle style = workbook.createCellStyle();
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        style.setWrapText(true);
        return style;
    }
    
    private static void createHeaderRow(XSSFRow headerRow, List<String> headers, XSSFCellStyle style) {
        for (int i = 0; i < headers.size(); i++) {
            XSSFCell cell = headerRow.createCell(i);
            cell.setCellValue(headers.get(i));
            cell.setCellStyle(style);
        }
    }
    
    private static void createDataRow(XSSFRow row, Map<String, Object> rowData, List<String> headers, XSSFCellStyle style) {
        for (int i = 0; i < headers.size(); i++) {
            String header = headers.get(i);
            Object value = rowData.get(header);
            XSSFCell cell = row.createCell(i);
            cell.setCellStyle(style);
            
            if (value != null) {
                // Handle different data types appropriately
                if (value instanceof Number) {
                    cell.setCellValue(((Number) value).doubleValue());
                } else if (value instanceof Boolean) {
                    cell.setCellValue((Boolean) value);
                } else {
                    cell.setCellValue(value.toString());
                }
            } else {
                cell.setCellValue("");
            }
        }
    }
}
